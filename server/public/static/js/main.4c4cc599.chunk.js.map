{"version":3,"sources":["App.js","serviceWorker.js","SideBar.js","index.js"],"names":["App","state","name","receiptId","price1","price2","email","address","handleChange","target","value","setState","createDownloadPdf","axios","post","then","get","responseType","res","pdfBlob","Blob","data","type","saveAs","row","document","getElementById","insertRow","cell1","insertCell","cell2","cell3","cell4","cell5","cell6","innerHTML","deleteRow","className","id","placeholder","onChange","this","style","display","justifyContent","alignItems","onClick","myFunction","myFunctions","Component","Boolean","window","location","hostname","match","props","href","ReactDOM","render","StrictMode","SideBar","pageWrapId","outerContainerId","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c4cc599.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport axios from \"axios\";\nimport {saveAs} from \"file-saver\";\nimport './App.css';\n\n\nconst styles = {\n  center: {\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  }\n}\nclass App extends Component {\nstate = {\n  name :\"\",\n  receiptId:0,\n  price1:0,\n  price2:0,\n  email:\"\",\n  address:\"\",\n}\n\nhandleChange  = ({target : { value, name}})=>  {\n  this.setState({[name]: value})\n}\n\n\nmyFunction() {\n  var table = document.getElementById(\"myTable\");\n  var row = table.insertRow(0);\n  var cell1 = row.insertCell(0);\n  var cell2 = row.insertCell(1);\n  var cell3 = row.insertCell(2);\n  var cell4 = row.insertCell(3);\n  var cell5 = row.insertCell(4);\n  var cell6 = row.insertCell(5);\n  cell1.innerHTML = `<input type=\"text\" placeholder = \"name\" name= \"name\" onChange = {this.handleChange} class= \"form-control\"/>`;\n  cell2.innerHTML = `<input type=\"text\" placeholder = \"address\" name= \"address\" onChange = {this.handleChange} class= \" form-control\"/>`;\n  cell3.innerHTML =`<input type=\"text\" placeholder = \"email\" name= \"email\" onChange = {this.handleChange} class= \" form-control\"/>` ;\n  cell4.innerHTML =`<input type=\"number\" placeholder = \"receipt Id\" name= \"receiptId\" onChange = {this.handleChange} class= \" form-control \"/>`;\n  cell5.innerHTML = `<input type=\"number\" placeholder = \"Price 1\" name= \"price1\" onChange = {this.handleChange} class= \" form-control \"/>`;\n  cell6.innerHTML =`<input type=\"number\" placeholder = \"Price 2\" name= \"price2\" onChange = {this.handleChange} class= \" form-control \"/>` ;\n\n}\nmyFunctions() {\n  document.getElementById(\"myTable\").deleteRow(0);\n\n}\ncreateDownloadPdf = () => {\n  axios.post('/create-pdf', this.state)\n  .then(() => axios.get('fetch-pdf', {responseType : 'blob'}))\n  .then((res) => {\n    const pdfBlob = new Blob([res.data], {type : ' application/pdf' });\n\n    saveAs(pdfBlob, 'newPdf.pdf');\n  } )\n}\n  render(){\n    return  <Fragment>\n      \n      <header>\n        <h1 className = \"text-center\">INVOICE</h1>\n      </header>\n      \n        <table  className = \"table mt-5 text-center\" >\n          <thead>\n          <tr>\n            <th>NAME</th>\n            <th>ADDRESS</th>\n            <th>EMAIL</th>\n            <th>RECEIPTID</th>\n            <th>PRICE1</th>\n            <th>PRICE2</th>\n          </tr>\n          </thead>\n          </table>\n          <table className = \"table mt-5 text-center\" id=\"myTable\">\n          <tbody>\n          <tr>\n            <td><input type=\"text\" placeholder = \"name\" name= \"name\" onChange = {this.handleChange} className= \" form-control\"/></td>\n            <td><input type=\"text\" placeholder = \"address\" name= \"address\" onChange = {this.handleChange} className= \" form-control\"/></td>\n            <td><input type=\"text\" placeholder = \"email\" name= \"email\" onChange = {this.handleChange} className= \" form-control\"/></td>\n            <td><input type=\"number\" placeholder = \"receipt Id\" name= \"receiptId\" onChange = {this.handleChange} className= \" form-control \"/></td>\n            <td><input type=\"number\" placeholder = \"Price 1\" name= \"price1\" onChange = {this.handleChange} className= \" form-control \"/></td>\n            <td><input type=\"number\" placeholder = \"Price 2\" name= \"price2\" onChange = {this.handleChange} className= \" form-control \"/></td>\n            \n          </tr>\n        </tbody>\n        </table>\n        <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      ><button className=\"btn btn-warning mx-2\" onClick={this.myFunction}>ADD ROW</button><br></br>\n        \n      <body>\n    \n</body>\n<button className=\"btn btn-danger\" onClick={this.myFunctions}>DELETE ROW</button>\n        <button  className = \" btn btn-success mx-2 float-none alignself-center\"  onClick = { this.createDownloadPdf}>\n          Download PDF\n        </button>\n      </div>\n        </Fragment>\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport { slide as Menu } from \"react-burger-menu\";\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\n\r\nexport default props => {\r\n  return (\r\n      \r\n    <Menu {...props}> \r\n    <header className=\"text-center\">MENU</header><br></br>\r\n      <a className=\"menu-item\" href=\"/\">\r\n       <i className=\"fa fa-home\"></i>   HOME \r\n        \r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"/burgers\">\r\n      <i className=\"fa fa-user-plus\"></i>   ADD CUSTOMER\r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"/pizzas\">\r\n      <i className=\"fa fa-file-invoice\"></i>  INVOICE\r\n      \r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"/desserts\">\r\n        <i className=\"fa fa-user-times\"></i> CUSTOMER REMOVE\r\n      </a>\r\n      <a className=\"menu-item\" href=\"/desserts\">\r\n      <i className=\"fa fa-database\"></i>    ADD INVENTORY\r\n      </a>\r\n    </Menu>\r\n  );\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport SideBar from './SideBar';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <SideBar  pageWrapId={\"page-wrap\"} outerContainerId={\"App\"}/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}